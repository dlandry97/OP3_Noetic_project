#!/usr/bin/env python3

import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CameraInfo
# from robokeeper.msg import Xy_depth
import cv2
import numpy as np
import pyrealsense2 as rs
import apriltags_ros
from apriltags_ros.msg import AprilTagDetectionArray
import csv
from testbed.srv import Plot_points, Reset_plots
# import testbed.srv.plot_points
# import testbed.srv.reset_plots
from std_srvs.srv import Empty, EmptyResponse
# import geometry_msgs
# from geometry_msgs.msg import TransformStamped 
from tf2_msgs.msg import TFMessage
import matplotlib.pyplot as plt

Height_offset = 0.25


class GetData(object):
    """ 
    Using the color and depth video streams from the camera, create a contour on the red ball and create three dimensional coordinates 
    """
    def __init__(self):
        #Converts ROS images to a format for OpenCV
        self._bridge = CvBridge()
        #Subscribe to camera_info to get intrinsics data
        rospy.Subscriber("/camera/aligned_depth_to_color/camera_info", CameraInfo, self.get_info)
        #Subcribe to topic that publishes color picture
        rospy.Subscriber("/camera/color/image_raw", Image, self.callback_color)
        #Subcribe to topic that publishes depth picture
        rospy.Subscriber("/camera/aligned_depth_to_color/image_raw", Image, self.callback_depth) # Use this for depth data

        self.time_array = ['Time']
        self.x_bro_array = ['x-axis']
        self.y_bro_array = ['y-axis']
        self.z_bro_array = ['z-axis']
        self.x_ref_array = ['x_ref-axis']
        self.y_ref_array = ['y_ref-axis']
        self.z_ref_array = ['z_ref-axis']
        self.x_disp_array = ['x_disp-axis']
        self.y_disp_array = ['y_disp-axis']
        self.z_disp_array = ['z_disp-axis']

        self.z_bro_array = ['self.bro_z']
        self.z_ref_array = ['self.ref_z']
        self.y_bro_array = ['self.bro_y']
        self.y_ref_array = ['self.ref_y']
        self.z_displacement_array = ['displacement z']
        self.y_displacement_array = ['displacement y']
        self.potential_diff = ['Potential diff']
        self.potential_loss = 0
        self.prev = Height_offset

        self.time_flag = False
        self.time_offset = 0.0

        self.bro_x = 0.0
        self.bro_y = 0.0
        self.bro_z = 0.0
        self.ref_x = 0.0
        self.ref_y = 0.0
        self.ref_z = 0.0

        rospy.Subscriber("/tf",TFMessage, self.tag_callback)

        self._plotter = rospy.Service('plot',Plot_points,self.plotter)
        self._quick_plot = rospy.Service('quick_plot',Empty,self.quick_plot)
        self._reset_plots = rospy.Service('reset_plot',Empty,self.reset_plots)
        # self.__get_pose = rospy.Service("getpose",Empty,self.get_pose_cb)


        #Setup publisher for publishing centroid coordinates and depth
        # self.pub = rospy.Publisher("Xy_depth", Xy_depth, queue_size=10)
        #Initialize an initial cx and cy coordinate for the centroid
        self.cx = 0
        self.cy = 0
        
        


    def plotter(self,data):

        self.time_array[1] = 0.0

        rospy.loginfo("Making file called : "+data.plot_name)
        # header = ['name', 'name2']
        try:
            with open('../classes/projects/op3/testbed/apriltag_try/src/testbed/plots/'+data.plot_name+'.csv',"w+") as plotfile:
                plot_writer = csv.writer(plotfile,delimiter=',')#,delimiter=' ',quotechar='|',quoting=csv.QUOTE_MINIMAL)
                # plot_writer.writerow(header)
                # print(self.x_bro_array)
                plot_writer.writerow(self.time_array)
                plot_writer.writerow(self.x_bro_array)
                # plot_writer.writerow(header)
                
                plot_writer.writerow(self.y_bro_array)
                plot_writer.writerow(self.z_bro_array)

                plot_writer.writerow(self.x_disp_array)
                plot_writer.writerow(self.y_disp_array)
                plot_writer.writerow(self.z_disp_array)
                plot_writer.writerow(self.potential_diff)

                plot_writer.writerow(["Potential loss",float(self.potential_loss)])
                # plot_writer.writerow(self.y_disp_array)

                
            rospy.loginfo("plotted")
        except:
            rospy.logwarn('Error with plotting')
        return EmptyResponse()

    def quick_plot(self,req):

        fig, ax = plt.subplots(3) 
        ax[0].plot(self.x_bro_array, label = 'x-axis')
        ax[1].plot(self.y_bro_array, label = 'y-axis')
        ax[2].plot(self.z_bro_array, label = 'z-axis')

        
        ax[0].legend()
        ax[1].legend()
        ax[2].legend()
        
       
        ax[0].set_xlabel("Time")
        ax[0].set_ylabel("X")
        ax[1].set_xlabel("Time")
        ax[1].set_ylabel("Y")
        ax[2].set_xlabel("Time")
        ax[2].set_ylabel("Z")
        fig.suptitle("Hip Tracking")

        fig2, ax2 = plt.subplots(3) 
        ax2[0].plot( self.z_bro_array, label = 'z of hip')
        ax2[1].plot(self.z_ref_array, label = 'z of reference')
        ax2[2].plot(self.z_disp_array, label = 'hip displacement')

        
        ax2[0].legend()
        ax2[1].legend()
        ax2[2].legend()
        
       
        ax2[0].set_xlabel("Time")
        ax2[0].set_ylabel("Height (m)")
        ax2[1].set_xlabel("Time")
        ax2[1].set_ylabel("Height (m)")
        ax2[2].set_xlabel("Time")
        ax2[2].set_ylabel("Height (m)")
        fig2.suptitle("Hip Tracking")



        # fig3, ax3 = plt.subplots()
        # ax3.plot(x,y)
        plt.show()
        
        

        return EmptyResponse()

    def reset_plots(self,req):
        self.time_array = ['Time']
        self.x_bro_array = ['x-axis']
        self.y_bro_array = ['y-axis']
        self.z_bro_array = ['z-axis']
        self.x_ref_array = ['x_ref-axis']
        self.y_ref_array = ['y_ref-axis']
        self.z_ref_array = ['z_ref-axis']
        self.x_disp_array = ['x_disp-axis']
        self.y_disp_array = ['y_disp-axis']
        self.z_disp_array = ['z_disp-axis']

        self.z_bro_array = ['self.bro_z']
        self.z_ref_array = ['self.ref_z']
        
        self.y_bro_array = ['self.bro_y']
        self.y_ref_array = ['self.ref_y']
        self.z_displacement_array = ['displacement z']
        self.y_displacement_array = ['displacement y']
        self.potential_diff = ['Potential diff']
        self.potential_loss = 0.0

        self.time_flag = False
        self.time_offset = 0.0

        return EmptyResponse()






    def tag_callback(self,data):
        """
        Function:
            Displays a top down view of the robot and ball
        Args:
            img- The color video stream
        Returns:
           None
        """
        
        for tf in data.transforms:
            rospy.loginfo('Detected '+tf.child_frame_id)

            if(tf.child_frame_id == 'Tag1'):
                
                bro_time = tf.header.stamp.secs + (tf.header.stamp.nsecs * 0.000000001) - self.time_offset
                if self.time_flag == False:
                    self.time_offset = bro_time
                    self.time_flag = True
                self.bro_x = tf.transform.translation.x
                self.bro_y = tf.transform.translation.y
                self.bro_z = tf.transform.translation.z
                self.x_bro_array.append(float(self.bro_x))
                self.y_bro_array.append(float(self.bro_y))
                self.z_bro_array.append(float(self.bro_z))
                self.time_array.append(float(bro_time))

                self.x_disp_array.append(float( self.ref_x- self.bro_x))
                self.y_disp_array.append(float( self.ref_y- self.bro_y + Height_offset))
                self.z_disp_array.append(float( self.ref_z- self.bro_z))

                self.potential_diff.append(float(self.ref_y- self.bro_y + Height_offset - self.prev))
                self.potential_loss +=  abs(self.ref_y- self.bro_y + Height_offset - self.prev)

                self.prev = self.ref_y- self.bro_y + Height_offset


                print("self.bro_x = ",self.bro_x,", self.bro_y = ",self.bro_y,", self.bro_z = ",self.bro_z)

            
            if(tf.child_frame_id == 'Tag2'):         
                
                self.ref_x = tf.transform.translation.x
                self.ref_y = tf.transform.translation.y
                self.ref_z = tf.transform.translation.z
                self.x_ref_array.append(float(self.ref_x))
                self.y_ref_array.append(float(self.ref_y))
                self.z_ref_array.append(float(self.ref_z))
                print("self.ref_x = ",self.ref_x,", self.ref_y = ",self.ref_y,", self.ref_z = ",self.ref_z)
            
            # if(tf.child_frame_id == 'Tag421'):         
                
            #     fin_x = tf.transform.translation.x
            #     fin_y = tf.transform.translation.y
            #     fin_z = tf.transform.translation.z
            #     self.x_bro_array.append(float(fin_x))
            #     self.y_bro_array.append(float(fin_y))
            #     self.z_bro_array.append(float(fin_z))
            #     print("fin_x = ",fin_x,", fin_y = ",fin_y,", fin_z = ",fin_z)
            
            # self.z_bro_array = ['self.bro_z']
            # self.z_ref_array = ['self.ref_z']
            # self.z_displacement_array = ['displacement']


            


            

        
        
        

    def show_img(self, img):
        """ 
        Function:
            Displays a top down view of the robot and ball
        Args:
            img- The color video stream
        Returns:
           None
        """

        # Show video
        cv2.namedWindow("Image", 1)
        cv2.imshow("Image", img)
        cv2.waitKey(3)
    
    def get_info(self,data):  
        """ 
        Function: Callback function for geting camera information for intrinsics 
        Args:
            data (sensor_msgs/CameraInfo)
        Returns:
            None
        """
        #Fill in the parameters for instrinsics from camera_info
        self.intrinsics = rs.intrinsics()
        self.intrinsics.width = data.width
        self.intrinsics.height = data.height
        self.intrinsics.ppx = data.K[2]
        self.intrinsics.ppx = data.K[5]
        self.intrinsics.fx = data.K[0]
        self.intrinsics.fy = data.K[4]
        self.intrinsics.model  = rs.distortion.none
        self.intrinsics.coeffs = [0.0, 0.0, 0.0, 0.0, 0.0]
        
    def callback_color(self,data):
        """ 
        Function: Callback function for geting color image from camera
        Args:
            data (sensor_msgs/Image)
        Returns:
            None
        """
        #Get the color image from camera
        color_img = self._bridge.imgmsg_to_cv2(data, "passthrough")
        #convert to RGB
        color_img = cv2.cvtColor(color_img, cv2.COLOR_BGR2RGB)
        #Call the draw contour function
        # result = self.draw_cont(color_img)
        # coords = self.xyz_from_intrin(self.depth_image,self.cx,self.cy)
        #Show the color image with contours
        # self.show_img(color_img)

    def callback_depth(self,data):
        """ 
        Function: Callback function for getting depth data from aligned depth to color
        Args:
            data (sensor_msgs/Image)
        Returns:
            None
        """
        #Create a depth image from camera. Make it self to be called throughout the code.
        self.depth_image = self._bridge.imgmsg_to_cv2(data, "passthrough")

    
if __name__=="__main__":
    #Initialize the perceoption node
    rospy.init_node("collection")
    #Start GetData
    c = GetData()
    #Prevent the node from stopping
    rospy.spin()